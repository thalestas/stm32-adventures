
005ExceptionPriority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e18  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08000fb0  08000fb0  00010fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001038  08001038  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001038  08001038  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001038  08001038  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001038  08001038  00011038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800103c  0800103c  0001103c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  080010a4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080010a4  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b37  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003aa  00000000  00000000  00020bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  00020f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000108  00000000  00000000  000210b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000028b6  00000000  00000000  000211c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011a9  00000000  00000000  00023a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000094a8  00000000  00000000  00024c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002e0c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000acc  00000000  00000000  0002e118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000f98 	.word	0x08000f98

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	08000f98 	.word	0x08000f98

080001d8 <set_exception_priority>:

#define EXTI0_IRQ_NUMBER 6
#define USART6_IRQ_NUMBER 71
#define SPI4_IRQ_NUMBER 84

void set_exception_priority(const uint8_t irq_number, const uint8_t priority) {
 80001d8:	b480      	push	{r7}
 80001da:	b087      	sub	sp, #28
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	460a      	mov	r2, r1
 80001e2:	71fb      	strb	r3, [r7, #7]
 80001e4:	4613      	mov	r3, r2
 80001e6:	71bb      	strb	r3, [r7, #6]
	//NVIC IPRx base address
	volatile uint32_t *const pIPR_base = (uint32_t*) 0xE000E400;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <set_exception_priority+0x50>)
 80001ea:	617b      	str	r3, [r7, #20]
	//Calculate which IPR to use
	volatile uint32_t *const pIPR = (uint32_t*) pIPR_base + (irq_number / IPR_IRQ_PER_REQ);
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	089b      	lsrs	r3, r3, #2
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	009b      	lsls	r3, r3, #2
 80001f4:	697a      	ldr	r2, [r7, #20]
 80001f6:	4413      	add	r3, r2
 80001f8:	613b      	str	r3, [r7, #16]

	//Compute IRQ Priority position
	uint8_t pos = (irq_number % IPR_IRQ_PER_REQ) * 8;
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	f003 0303 	and.w	r3, r3, #3
 8000200:	b2db      	uxtb	r3, r3
 8000202:	00db      	lsls	r3, r3, #3
 8000204:	73fb      	strb	r3, [r7, #15]

	//Set IRQ Priority
	*pIPR |= ((priority << pos) << 4);
 8000206:	693b      	ldr	r3, [r7, #16]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	79b9      	ldrb	r1, [r7, #6]
 800020c:	7bfa      	ldrb	r2, [r7, #15]
 800020e:	fa01 f202 	lsl.w	r2, r1, r2
 8000212:	0112      	lsls	r2, r2, #4
 8000214:	431a      	orrs	r2, r3
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	601a      	str	r2, [r3, #0]
}
 800021a:	bf00      	nop
 800021c:	371c      	adds	r7, #28
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	e000e400 	.word	0xe000e400

0800022c <enable_exception>:

void enable_exception(const uint8_t irq_number) {
 800022c:	b480      	push	{r7}
 800022e:	b085      	sub	sp, #20
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
	//NVIC_ISERx base address
	volatile uint32_t *const pISER_base = (uint32_t*) 0xE000E100;
 8000236:	4b0d      	ldr	r3, [pc, #52]	; (800026c <enable_exception+0x40>)
 8000238:	60fb      	str	r3, [r7, #12]
	//Calculate which ISER to use
	volatile uint32_t *const pISER = (uint32_t*) pISER_base + (irq_number / ISER_NUM_BITS);
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	095b      	lsrs	r3, r3, #5
 800023e:	b2db      	uxtb	r3, r3
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	4413      	add	r3, r2
 8000246:	60bb      	str	r3, [r7, #8]

	//Set IRQ bit
	*pISER |= (1 << (irq_number%ISER_NUM_BITS));
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	79fa      	ldrb	r2, [r7, #7]
 800024e:	f002 021f 	and.w	r2, r2, #31
 8000252:	2101      	movs	r1, #1
 8000254:	fa01 f202 	lsl.w	r2, r1, r2
 8000258:	431a      	orrs	r2, r3
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	601a      	str	r2, [r3, #0]
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	e000e100 	.word	0xe000e100

08000270 <set_pending>:

void set_pending(const uint8_t *irq_number, uint8_t size) {
 8000270:	b480      	push	{r7}
 8000272:	b087      	sub	sp, #28
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	460b      	mov	r3, r1
 800027a:	70fb      	strb	r3, [r7, #3]
	uint32_t ispr_value = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	617b      	str	r3, [r7, #20]

	//NVIC ISPRx base address
	volatile uint32_t *const pISPR_base = (uint32_t*) 0xE000E200;
 8000280:	4b16      	ldr	r3, [pc, #88]	; (80002dc <set_pending+0x6c>)
 8000282:	60fb      	str	r3, [r7, #12]
	//Calculate which ISPR to use
	volatile uint32_t *const pISPR = (uint32_t*) pISPR_base + (irq_number[0] / ISPR_NUM_BITS);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	095b      	lsrs	r3, r3, #5
 800028a:	b2db      	uxtb	r3, r3
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	68fa      	ldr	r2, [r7, #12]
 8000290:	4413      	add	r3, r2
 8000292:	60bb      	str	r3, [r7, #8]

	//Check all values to set
	for(int i=0; i<size; i++) {
 8000294:	2300      	movs	r3, #0
 8000296:	613b      	str	r3, [r7, #16]
 8000298:	e00f      	b.n	80002ba <set_pending+0x4a>
		ispr_value |= (1 << (irq_number[i] % ISPR_NUM_BITS));
 800029a:	693b      	ldr	r3, [r7, #16]
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	4413      	add	r3, r2
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	f003 031f 	and.w	r3, r3, #31
 80002a6:	2201      	movs	r2, #1
 80002a8:	fa02 f303 	lsl.w	r3, r2, r3
 80002ac:	461a      	mov	r2, r3
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	4313      	orrs	r3, r2
 80002b2:	617b      	str	r3, [r7, #20]
	for(int i=0; i<size; i++) {
 80002b4:	693b      	ldr	r3, [r7, #16]
 80002b6:	3301      	adds	r3, #1
 80002b8:	613b      	str	r3, [r7, #16]
 80002ba:	78fb      	ldrb	r3, [r7, #3]
 80002bc:	693a      	ldr	r2, [r7, #16]
 80002be:	429a      	cmp	r2, r3
 80002c0:	dbeb      	blt.n	800029a <set_pending+0x2a>
	}

	//Set IRQ bit
	*pISPR |= ispr_value;
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	431a      	orrs	r2, r3
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	601a      	str	r2, [r3, #0]
}
 80002ce:	bf00      	nop
 80002d0:	371c      	adds	r7, #28
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	e000e200 	.word	0xe000e200

080002e0 <main>:

int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
	uint8_t irqs[2] = {USART6_IRQ_NUMBER, SPI4_IRQ_NUMBER};
 80002e6:	f245 4347 	movw	r3, #21575	; 0x5447
 80002ea:	80bb      	strh	r3, [r7, #4]
	uint8_t size = sizeof(irqs) / sizeof(irqs[0]);
 80002ec:	2302      	movs	r3, #2
 80002ee:	71fb      	strb	r3, [r7, #7]

    /* Loop forever */
	printf("Jaraqui!\n");
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <main+0x40>)
 80002f2:	f000 f9c1 	bl	8000678 <puts>

	/* Set Exception priority */
	set_exception_priority(USART6_IRQ_NUMBER, 4);
 80002f6:	2104      	movs	r1, #4
 80002f8:	2047      	movs	r0, #71	; 0x47
 80002fa:	f7ff ff6d 	bl	80001d8 <set_exception_priority>
	set_exception_priority(SPI4_IRQ_NUMBER, 2);
 80002fe:	2102      	movs	r1, #2
 8000300:	2054      	movs	r0, #84	; 0x54
 8000302:	f7ff ff69 	bl	80001d8 <set_exception_priority>

	/* USART6 IRQ number 6 */
	enable_exception(USART6_IRQ_NUMBER);
 8000306:	2047      	movs	r0, #71	; 0x47
 8000308:	f7ff ff90 	bl	800022c <enable_exception>
	/* EXT0 IRQ number 6 */
	enable_exception(SPI4_IRQ_NUMBER);
 800030c:	2054      	movs	r0, #84	; 0x54
 800030e:	f7ff ff8d 	bl	800022c <enable_exception>

	set_pending(irqs, size);
 8000312:	79fa      	ldrb	r2, [r7, #7]
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	4611      	mov	r1, r2
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ffa9 	bl	8000270 <set_pending>

	for(;;);
 800031e:	e7fe      	b.n	800031e <main+0x3e>
 8000320:	08000fb0 	.word	0x08000fb0

08000324 <USART6_IRQHandler>:
}


void USART6_IRQHandler() {
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	printf("Tambaqui\n");
 8000328:	4802      	ldr	r0, [pc, #8]	; (8000334 <USART6_IRQHandler+0x10>)
 800032a:	f000 f9a5 	bl	8000678 <puts>
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	08000fbc 	.word	0x08000fbc

08000338 <SPI4_IRQHandler>:

void SPI4_IRQHandler() {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	printf("Matrinxa\n");
 800033c:	4802      	ldr	r0, [pc, #8]	; (8000348 <SPI4_IRQHandler+0x10>)
 800033e:	f000 f99b 	bl	8000678 <puts>
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	08000fc8 	.word	0x08000fc8

0800034c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0      *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN            *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]

    //Enable TRCENA
    DEMCR |= ( 1 << 24);
 8000356:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <ITM_SendChar+0x48>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a0e      	ldr	r2, [pc, #56]	; (8000394 <ITM_SendChar+0x48>)
 800035c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000360:	6013      	str	r3, [r2, #0]

    //enable stimulus port 0
    ITM_TRACE_EN |= ( 1 << 0);
 8000362:	4b0d      	ldr	r3, [pc, #52]	; (8000398 <ITM_SendChar+0x4c>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a0c      	ldr	r2, [pc, #48]	; (8000398 <ITM_SendChar+0x4c>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6013      	str	r3, [r2, #0]

    // read FIFO status in bit [0]:
    while(!(ITM_STIMULUS_PORT0 & 1));
 800036e:	bf00      	nop
 8000370:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f8      	beq.n	8000370 <ITM_SendChar+0x24>

    //Write to ITM stimulus port0
    ITM_STIMULUS_PORT0 = ch;
 800037e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	6013      	str	r3, [r2, #0]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	e000edfc 	.word	0xe000edfc
 8000398:	e0000e00 	.word	0xe0000e00

0800039c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a8:	2300      	movs	r3, #0
 80003aa:	617b      	str	r3, [r7, #20]
 80003ac:	e00a      	b.n	80003c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003ae:	f3af 8000 	nop.w
 80003b2:	4601      	mov	r1, r0
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	1c5a      	adds	r2, r3, #1
 80003b8:	60ba      	str	r2, [r7, #8]
 80003ba:	b2ca      	uxtb	r2, r1
 80003bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	3301      	adds	r3, #1
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	697a      	ldr	r2, [r7, #20]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	dbf0      	blt.n	80003ae <_read+0x12>
  }

  return len;
 80003cc:	687b      	ldr	r3, [r7, #4]
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3718      	adds	r7, #24
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b086      	sub	sp, #24
 80003da:	af00      	add	r7, sp, #0
 80003dc:	60f8      	str	r0, [r7, #12]
 80003de:	60b9      	str	r1, [r7, #8]
 80003e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]
 80003e6:	e009      	b.n	80003fc <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	1c5a      	adds	r2, r3, #1
 80003ec:	60ba      	str	r2, [r7, #8]
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	4618      	mov	r0, r3
 80003f2:	f7ff ffab 	bl	800034c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	3301      	adds	r3, #1
 80003fa:	617b      	str	r3, [r7, #20]
 80003fc:	697a      	ldr	r2, [r7, #20]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	429a      	cmp	r2, r3
 8000402:	dbf1      	blt.n	80003e8 <_write+0x12>
  }
  return len;
 8000404:	687b      	ldr	r3, [r7, #4]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3718      	adds	r7, #24
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <_close>:

int _close(int file)
{
 800040e:	b480      	push	{r7}
 8000410:	b083      	sub	sp, #12
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800041a:	4618      	mov	r0, r3
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000426:	b480      	push	{r7}
 8000428:	b083      	sub	sp, #12
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
 800042e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000436:	605a      	str	r2, [r3, #4]
  return 0;
 8000438:	2300      	movs	r3, #0
}
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr

08000446 <_isatty>:

int _isatty(int file)
{
 8000446:	b480      	push	{r7}
 8000448:	b083      	sub	sp, #12
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800044e:	2301      	movs	r3, #1
}
 8000450:	4618      	mov	r0, r3
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000468:	2300      	movs	r3, #0
}
 800046a:	4618      	mov	r0, r3
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
	...

08000478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000480:	4a14      	ldr	r2, [pc, #80]	; (80004d4 <_sbrk+0x5c>)
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <_sbrk+0x60>)
 8000484:	1ad3      	subs	r3, r2, r3
 8000486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800048c:	4b13      	ldr	r3, [pc, #76]	; (80004dc <_sbrk+0x64>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d102      	bne.n	800049a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <_sbrk+0x64>)
 8000496:	4a12      	ldr	r2, [pc, #72]	; (80004e0 <_sbrk+0x68>)
 8000498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <_sbrk+0x64>)
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	693a      	ldr	r2, [r7, #16]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d207      	bcs.n	80004b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004a8:	f000 f846 	bl	8000538 <__errno>
 80004ac:	4603      	mov	r3, r0
 80004ae:	220c      	movs	r2, #12
 80004b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004b6:	e009      	b.n	80004cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <_sbrk+0x64>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004be:	4b07      	ldr	r3, [pc, #28]	; (80004dc <_sbrk+0x64>)
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4413      	add	r3, r2
 80004c6:	4a05      	ldr	r2, [pc, #20]	; (80004dc <_sbrk+0x64>)
 80004c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ca:	68fb      	ldr	r3, [r7, #12]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3718      	adds	r7, #24
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20020000 	.word	0x20020000
 80004d8:	00000400 	.word	0x00000400
 80004dc:	20000080 	.word	0x20000080
 80004e0:	20000098 	.word	0x20000098

080004e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e4:	480d      	ldr	r0, [pc, #52]	; (800051c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004ec:	480c      	ldr	r0, [pc, #48]	; (8000520 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ee:	490d      	ldr	r1, [pc, #52]	; (8000524 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <LoopForever+0xe>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f4:	e002      	b.n	80004fc <LoopCopyDataInit>

080004f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fa:	3304      	adds	r3, #4

080004fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000500:	d3f9      	bcc.n	80004f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000502:	4a0a      	ldr	r2, [pc, #40]	; (800052c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000504:	4c0a      	ldr	r4, [pc, #40]	; (8000530 <LoopForever+0x16>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000508:	e001      	b.n	800050e <LoopFillZerobss>

0800050a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800050c:	3204      	adds	r2, #4

0800050e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000510:	d3fb      	bcc.n	800050a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000512:	f000 f817 	bl	8000544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000516:	f7ff fee3 	bl	80002e0 <main>

0800051a <LoopForever>:

LoopForever:
  b LoopForever
 800051a:	e7fe      	b.n	800051a <LoopForever>
  ldr   r0, =_estack
 800051c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000524:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000528:	08001040 	.word	0x08001040
  ldr r2, =_sbss
 800052c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000530:	20000094 	.word	0x20000094

08000534 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000534:	e7fe      	b.n	8000534 <ADC_IRQHandler>
	...

08000538 <__errno>:
 8000538:	4b01      	ldr	r3, [pc, #4]	; (8000540 <__errno+0x8>)
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000000 	.word	0x20000000

08000544 <__libc_init_array>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	4d0d      	ldr	r5, [pc, #52]	; (800057c <__libc_init_array+0x38>)
 8000548:	4c0d      	ldr	r4, [pc, #52]	; (8000580 <__libc_init_array+0x3c>)
 800054a:	1b64      	subs	r4, r4, r5
 800054c:	10a4      	asrs	r4, r4, #2
 800054e:	2600      	movs	r6, #0
 8000550:	42a6      	cmp	r6, r4
 8000552:	d109      	bne.n	8000568 <__libc_init_array+0x24>
 8000554:	4d0b      	ldr	r5, [pc, #44]	; (8000584 <__libc_init_array+0x40>)
 8000556:	4c0c      	ldr	r4, [pc, #48]	; (8000588 <__libc_init_array+0x44>)
 8000558:	f000 fd1e 	bl	8000f98 <_init>
 800055c:	1b64      	subs	r4, r4, r5
 800055e:	10a4      	asrs	r4, r4, #2
 8000560:	2600      	movs	r6, #0
 8000562:	42a6      	cmp	r6, r4
 8000564:	d105      	bne.n	8000572 <__libc_init_array+0x2e>
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	f855 3b04 	ldr.w	r3, [r5], #4
 800056c:	4798      	blx	r3
 800056e:	3601      	adds	r6, #1
 8000570:	e7ee      	b.n	8000550 <__libc_init_array+0xc>
 8000572:	f855 3b04 	ldr.w	r3, [r5], #4
 8000576:	4798      	blx	r3
 8000578:	3601      	adds	r6, #1
 800057a:	e7f2      	b.n	8000562 <__libc_init_array+0x1e>
 800057c:	08001038 	.word	0x08001038
 8000580:	08001038 	.word	0x08001038
 8000584:	08001038 	.word	0x08001038
 8000588:	0800103c 	.word	0x0800103c

0800058c <memset>:
 800058c:	4402      	add	r2, r0
 800058e:	4603      	mov	r3, r0
 8000590:	4293      	cmp	r3, r2
 8000592:	d100      	bne.n	8000596 <memset+0xa>
 8000594:	4770      	bx	lr
 8000596:	f803 1b01 	strb.w	r1, [r3], #1
 800059a:	e7f9      	b.n	8000590 <memset+0x4>

0800059c <_puts_r>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	460e      	mov	r6, r1
 80005a0:	4605      	mov	r5, r0
 80005a2:	b118      	cbz	r0, 80005ac <_puts_r+0x10>
 80005a4:	6983      	ldr	r3, [r0, #24]
 80005a6:	b90b      	cbnz	r3, 80005ac <_puts_r+0x10>
 80005a8:	f000 fa48 	bl	8000a3c <__sinit>
 80005ac:	69ab      	ldr	r3, [r5, #24]
 80005ae:	68ac      	ldr	r4, [r5, #8]
 80005b0:	b913      	cbnz	r3, 80005b8 <_puts_r+0x1c>
 80005b2:	4628      	mov	r0, r5
 80005b4:	f000 fa42 	bl	8000a3c <__sinit>
 80005b8:	4b2c      	ldr	r3, [pc, #176]	; (800066c <_puts_r+0xd0>)
 80005ba:	429c      	cmp	r4, r3
 80005bc:	d120      	bne.n	8000600 <_puts_r+0x64>
 80005be:	686c      	ldr	r4, [r5, #4]
 80005c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80005c2:	07db      	lsls	r3, r3, #31
 80005c4:	d405      	bmi.n	80005d2 <_puts_r+0x36>
 80005c6:	89a3      	ldrh	r3, [r4, #12]
 80005c8:	0598      	lsls	r0, r3, #22
 80005ca:	d402      	bmi.n	80005d2 <_puts_r+0x36>
 80005cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80005ce:	f000 fad3 	bl	8000b78 <__retarget_lock_acquire_recursive>
 80005d2:	89a3      	ldrh	r3, [r4, #12]
 80005d4:	0719      	lsls	r1, r3, #28
 80005d6:	d51d      	bpl.n	8000614 <_puts_r+0x78>
 80005d8:	6923      	ldr	r3, [r4, #16]
 80005da:	b1db      	cbz	r3, 8000614 <_puts_r+0x78>
 80005dc:	3e01      	subs	r6, #1
 80005de:	68a3      	ldr	r3, [r4, #8]
 80005e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80005e4:	3b01      	subs	r3, #1
 80005e6:	60a3      	str	r3, [r4, #8]
 80005e8:	bb39      	cbnz	r1, 800063a <_puts_r+0x9e>
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	da38      	bge.n	8000660 <_puts_r+0xc4>
 80005ee:	4622      	mov	r2, r4
 80005f0:	210a      	movs	r1, #10
 80005f2:	4628      	mov	r0, r5
 80005f4:	f000 f848 	bl	8000688 <__swbuf_r>
 80005f8:	3001      	adds	r0, #1
 80005fa:	d011      	beq.n	8000620 <_puts_r+0x84>
 80005fc:	250a      	movs	r5, #10
 80005fe:	e011      	b.n	8000624 <_puts_r+0x88>
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <_puts_r+0xd4>)
 8000602:	429c      	cmp	r4, r3
 8000604:	d101      	bne.n	800060a <_puts_r+0x6e>
 8000606:	68ac      	ldr	r4, [r5, #8]
 8000608:	e7da      	b.n	80005c0 <_puts_r+0x24>
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <_puts_r+0xd8>)
 800060c:	429c      	cmp	r4, r3
 800060e:	bf08      	it	eq
 8000610:	68ec      	ldreq	r4, [r5, #12]
 8000612:	e7d5      	b.n	80005c0 <_puts_r+0x24>
 8000614:	4621      	mov	r1, r4
 8000616:	4628      	mov	r0, r5
 8000618:	f000 f888 	bl	800072c <__swsetup_r>
 800061c:	2800      	cmp	r0, #0
 800061e:	d0dd      	beq.n	80005dc <_puts_r+0x40>
 8000620:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000624:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000626:	07da      	lsls	r2, r3, #31
 8000628:	d405      	bmi.n	8000636 <_puts_r+0x9a>
 800062a:	89a3      	ldrh	r3, [r4, #12]
 800062c:	059b      	lsls	r3, r3, #22
 800062e:	d402      	bmi.n	8000636 <_puts_r+0x9a>
 8000630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000632:	f000 faa2 	bl	8000b7a <__retarget_lock_release_recursive>
 8000636:	4628      	mov	r0, r5
 8000638:	bd70      	pop	{r4, r5, r6, pc}
 800063a:	2b00      	cmp	r3, #0
 800063c:	da04      	bge.n	8000648 <_puts_r+0xac>
 800063e:	69a2      	ldr	r2, [r4, #24]
 8000640:	429a      	cmp	r2, r3
 8000642:	dc06      	bgt.n	8000652 <_puts_r+0xb6>
 8000644:	290a      	cmp	r1, #10
 8000646:	d004      	beq.n	8000652 <_puts_r+0xb6>
 8000648:	6823      	ldr	r3, [r4, #0]
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	6022      	str	r2, [r4, #0]
 800064e:	7019      	strb	r1, [r3, #0]
 8000650:	e7c5      	b.n	80005de <_puts_r+0x42>
 8000652:	4622      	mov	r2, r4
 8000654:	4628      	mov	r0, r5
 8000656:	f000 f817 	bl	8000688 <__swbuf_r>
 800065a:	3001      	adds	r0, #1
 800065c:	d1bf      	bne.n	80005de <_puts_r+0x42>
 800065e:	e7df      	b.n	8000620 <_puts_r+0x84>
 8000660:	6823      	ldr	r3, [r4, #0]
 8000662:	250a      	movs	r5, #10
 8000664:	1c5a      	adds	r2, r3, #1
 8000666:	6022      	str	r2, [r4, #0]
 8000668:	701d      	strb	r5, [r3, #0]
 800066a:	e7db      	b.n	8000624 <_puts_r+0x88>
 800066c:	08000ff8 	.word	0x08000ff8
 8000670:	08001018 	.word	0x08001018
 8000674:	08000fd8 	.word	0x08000fd8

08000678 <puts>:
 8000678:	4b02      	ldr	r3, [pc, #8]	; (8000684 <puts+0xc>)
 800067a:	4601      	mov	r1, r0
 800067c:	6818      	ldr	r0, [r3, #0]
 800067e:	f7ff bf8d 	b.w	800059c <_puts_r>
 8000682:	bf00      	nop
 8000684:	20000000 	.word	0x20000000

08000688 <__swbuf_r>:
 8000688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068a:	460e      	mov	r6, r1
 800068c:	4614      	mov	r4, r2
 800068e:	4605      	mov	r5, r0
 8000690:	b118      	cbz	r0, 800069a <__swbuf_r+0x12>
 8000692:	6983      	ldr	r3, [r0, #24]
 8000694:	b90b      	cbnz	r3, 800069a <__swbuf_r+0x12>
 8000696:	f000 f9d1 	bl	8000a3c <__sinit>
 800069a:	4b21      	ldr	r3, [pc, #132]	; (8000720 <__swbuf_r+0x98>)
 800069c:	429c      	cmp	r4, r3
 800069e:	d12b      	bne.n	80006f8 <__swbuf_r+0x70>
 80006a0:	686c      	ldr	r4, [r5, #4]
 80006a2:	69a3      	ldr	r3, [r4, #24]
 80006a4:	60a3      	str	r3, [r4, #8]
 80006a6:	89a3      	ldrh	r3, [r4, #12]
 80006a8:	071a      	lsls	r2, r3, #28
 80006aa:	d52f      	bpl.n	800070c <__swbuf_r+0x84>
 80006ac:	6923      	ldr	r3, [r4, #16]
 80006ae:	b36b      	cbz	r3, 800070c <__swbuf_r+0x84>
 80006b0:	6923      	ldr	r3, [r4, #16]
 80006b2:	6820      	ldr	r0, [r4, #0]
 80006b4:	1ac0      	subs	r0, r0, r3
 80006b6:	6963      	ldr	r3, [r4, #20]
 80006b8:	b2f6      	uxtb	r6, r6
 80006ba:	4283      	cmp	r3, r0
 80006bc:	4637      	mov	r7, r6
 80006be:	dc04      	bgt.n	80006ca <__swbuf_r+0x42>
 80006c0:	4621      	mov	r1, r4
 80006c2:	4628      	mov	r0, r5
 80006c4:	f000 f926 	bl	8000914 <_fflush_r>
 80006c8:	bb30      	cbnz	r0, 8000718 <__swbuf_r+0x90>
 80006ca:	68a3      	ldr	r3, [r4, #8]
 80006cc:	3b01      	subs	r3, #1
 80006ce:	60a3      	str	r3, [r4, #8]
 80006d0:	6823      	ldr	r3, [r4, #0]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	6022      	str	r2, [r4, #0]
 80006d6:	701e      	strb	r6, [r3, #0]
 80006d8:	6963      	ldr	r3, [r4, #20]
 80006da:	3001      	adds	r0, #1
 80006dc:	4283      	cmp	r3, r0
 80006de:	d004      	beq.n	80006ea <__swbuf_r+0x62>
 80006e0:	89a3      	ldrh	r3, [r4, #12]
 80006e2:	07db      	lsls	r3, r3, #31
 80006e4:	d506      	bpl.n	80006f4 <__swbuf_r+0x6c>
 80006e6:	2e0a      	cmp	r6, #10
 80006e8:	d104      	bne.n	80006f4 <__swbuf_r+0x6c>
 80006ea:	4621      	mov	r1, r4
 80006ec:	4628      	mov	r0, r5
 80006ee:	f000 f911 	bl	8000914 <_fflush_r>
 80006f2:	b988      	cbnz	r0, 8000718 <__swbuf_r+0x90>
 80006f4:	4638      	mov	r0, r7
 80006f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <__swbuf_r+0x9c>)
 80006fa:	429c      	cmp	r4, r3
 80006fc:	d101      	bne.n	8000702 <__swbuf_r+0x7a>
 80006fe:	68ac      	ldr	r4, [r5, #8]
 8000700:	e7cf      	b.n	80006a2 <__swbuf_r+0x1a>
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <__swbuf_r+0xa0>)
 8000704:	429c      	cmp	r4, r3
 8000706:	bf08      	it	eq
 8000708:	68ec      	ldreq	r4, [r5, #12]
 800070a:	e7ca      	b.n	80006a2 <__swbuf_r+0x1a>
 800070c:	4621      	mov	r1, r4
 800070e:	4628      	mov	r0, r5
 8000710:	f000 f80c 	bl	800072c <__swsetup_r>
 8000714:	2800      	cmp	r0, #0
 8000716:	d0cb      	beq.n	80006b0 <__swbuf_r+0x28>
 8000718:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800071c:	e7ea      	b.n	80006f4 <__swbuf_r+0x6c>
 800071e:	bf00      	nop
 8000720:	08000ff8 	.word	0x08000ff8
 8000724:	08001018 	.word	0x08001018
 8000728:	08000fd8 	.word	0x08000fd8

0800072c <__swsetup_r>:
 800072c:	4b32      	ldr	r3, [pc, #200]	; (80007f8 <__swsetup_r+0xcc>)
 800072e:	b570      	push	{r4, r5, r6, lr}
 8000730:	681d      	ldr	r5, [r3, #0]
 8000732:	4606      	mov	r6, r0
 8000734:	460c      	mov	r4, r1
 8000736:	b125      	cbz	r5, 8000742 <__swsetup_r+0x16>
 8000738:	69ab      	ldr	r3, [r5, #24]
 800073a:	b913      	cbnz	r3, 8000742 <__swsetup_r+0x16>
 800073c:	4628      	mov	r0, r5
 800073e:	f000 f97d 	bl	8000a3c <__sinit>
 8000742:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <__swsetup_r+0xd0>)
 8000744:	429c      	cmp	r4, r3
 8000746:	d10f      	bne.n	8000768 <__swsetup_r+0x3c>
 8000748:	686c      	ldr	r4, [r5, #4]
 800074a:	89a3      	ldrh	r3, [r4, #12]
 800074c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000750:	0719      	lsls	r1, r3, #28
 8000752:	d42c      	bmi.n	80007ae <__swsetup_r+0x82>
 8000754:	06dd      	lsls	r5, r3, #27
 8000756:	d411      	bmi.n	800077c <__swsetup_r+0x50>
 8000758:	2309      	movs	r3, #9
 800075a:	6033      	str	r3, [r6, #0]
 800075c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000760:	81a3      	strh	r3, [r4, #12]
 8000762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000766:	e03e      	b.n	80007e6 <__swsetup_r+0xba>
 8000768:	4b25      	ldr	r3, [pc, #148]	; (8000800 <__swsetup_r+0xd4>)
 800076a:	429c      	cmp	r4, r3
 800076c:	d101      	bne.n	8000772 <__swsetup_r+0x46>
 800076e:	68ac      	ldr	r4, [r5, #8]
 8000770:	e7eb      	b.n	800074a <__swsetup_r+0x1e>
 8000772:	4b24      	ldr	r3, [pc, #144]	; (8000804 <__swsetup_r+0xd8>)
 8000774:	429c      	cmp	r4, r3
 8000776:	bf08      	it	eq
 8000778:	68ec      	ldreq	r4, [r5, #12]
 800077a:	e7e6      	b.n	800074a <__swsetup_r+0x1e>
 800077c:	0758      	lsls	r0, r3, #29
 800077e:	d512      	bpl.n	80007a6 <__swsetup_r+0x7a>
 8000780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000782:	b141      	cbz	r1, 8000796 <__swsetup_r+0x6a>
 8000784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000788:	4299      	cmp	r1, r3
 800078a:	d002      	beq.n	8000792 <__swsetup_r+0x66>
 800078c:	4630      	mov	r0, r6
 800078e:	f000 fa5b 	bl	8000c48 <_free_r>
 8000792:	2300      	movs	r3, #0
 8000794:	6363      	str	r3, [r4, #52]	; 0x34
 8000796:	89a3      	ldrh	r3, [r4, #12]
 8000798:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800079c:	81a3      	strh	r3, [r4, #12]
 800079e:	2300      	movs	r3, #0
 80007a0:	6063      	str	r3, [r4, #4]
 80007a2:	6923      	ldr	r3, [r4, #16]
 80007a4:	6023      	str	r3, [r4, #0]
 80007a6:	89a3      	ldrh	r3, [r4, #12]
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	81a3      	strh	r3, [r4, #12]
 80007ae:	6923      	ldr	r3, [r4, #16]
 80007b0:	b94b      	cbnz	r3, 80007c6 <__swsetup_r+0x9a>
 80007b2:	89a3      	ldrh	r3, [r4, #12]
 80007b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80007b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007bc:	d003      	beq.n	80007c6 <__swsetup_r+0x9a>
 80007be:	4621      	mov	r1, r4
 80007c0:	4630      	mov	r0, r6
 80007c2:	f000 fa01 	bl	8000bc8 <__smakebuf_r>
 80007c6:	89a0      	ldrh	r0, [r4, #12]
 80007c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80007cc:	f010 0301 	ands.w	r3, r0, #1
 80007d0:	d00a      	beq.n	80007e8 <__swsetup_r+0xbc>
 80007d2:	2300      	movs	r3, #0
 80007d4:	60a3      	str	r3, [r4, #8]
 80007d6:	6963      	ldr	r3, [r4, #20]
 80007d8:	425b      	negs	r3, r3
 80007da:	61a3      	str	r3, [r4, #24]
 80007dc:	6923      	ldr	r3, [r4, #16]
 80007de:	b943      	cbnz	r3, 80007f2 <__swsetup_r+0xc6>
 80007e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80007e4:	d1ba      	bne.n	800075c <__swsetup_r+0x30>
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	0781      	lsls	r1, r0, #30
 80007ea:	bf58      	it	pl
 80007ec:	6963      	ldrpl	r3, [r4, #20]
 80007ee:	60a3      	str	r3, [r4, #8]
 80007f0:	e7f4      	b.n	80007dc <__swsetup_r+0xb0>
 80007f2:	2000      	movs	r0, #0
 80007f4:	e7f7      	b.n	80007e6 <__swsetup_r+0xba>
 80007f6:	bf00      	nop
 80007f8:	20000000 	.word	0x20000000
 80007fc:	08000ff8 	.word	0x08000ff8
 8000800:	08001018 	.word	0x08001018
 8000804:	08000fd8 	.word	0x08000fd8

08000808 <__sflush_r>:
 8000808:	898a      	ldrh	r2, [r1, #12]
 800080a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800080e:	4605      	mov	r5, r0
 8000810:	0710      	lsls	r0, r2, #28
 8000812:	460c      	mov	r4, r1
 8000814:	d458      	bmi.n	80008c8 <__sflush_r+0xc0>
 8000816:	684b      	ldr	r3, [r1, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dc05      	bgt.n	8000828 <__sflush_r+0x20>
 800081c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800081e:	2b00      	cmp	r3, #0
 8000820:	dc02      	bgt.n	8000828 <__sflush_r+0x20>
 8000822:	2000      	movs	r0, #0
 8000824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800082a:	2e00      	cmp	r6, #0
 800082c:	d0f9      	beq.n	8000822 <__sflush_r+0x1a>
 800082e:	2300      	movs	r3, #0
 8000830:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000834:	682f      	ldr	r7, [r5, #0]
 8000836:	602b      	str	r3, [r5, #0]
 8000838:	d032      	beq.n	80008a0 <__sflush_r+0x98>
 800083a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800083c:	89a3      	ldrh	r3, [r4, #12]
 800083e:	075a      	lsls	r2, r3, #29
 8000840:	d505      	bpl.n	800084e <__sflush_r+0x46>
 8000842:	6863      	ldr	r3, [r4, #4]
 8000844:	1ac0      	subs	r0, r0, r3
 8000846:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000848:	b10b      	cbz	r3, 800084e <__sflush_r+0x46>
 800084a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800084c:	1ac0      	subs	r0, r0, r3
 800084e:	2300      	movs	r3, #0
 8000850:	4602      	mov	r2, r0
 8000852:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000854:	6a21      	ldr	r1, [r4, #32]
 8000856:	4628      	mov	r0, r5
 8000858:	47b0      	blx	r6
 800085a:	1c43      	adds	r3, r0, #1
 800085c:	89a3      	ldrh	r3, [r4, #12]
 800085e:	d106      	bne.n	800086e <__sflush_r+0x66>
 8000860:	6829      	ldr	r1, [r5, #0]
 8000862:	291d      	cmp	r1, #29
 8000864:	d82c      	bhi.n	80008c0 <__sflush_r+0xb8>
 8000866:	4a2a      	ldr	r2, [pc, #168]	; (8000910 <__sflush_r+0x108>)
 8000868:	40ca      	lsrs	r2, r1
 800086a:	07d6      	lsls	r6, r2, #31
 800086c:	d528      	bpl.n	80008c0 <__sflush_r+0xb8>
 800086e:	2200      	movs	r2, #0
 8000870:	6062      	str	r2, [r4, #4]
 8000872:	04d9      	lsls	r1, r3, #19
 8000874:	6922      	ldr	r2, [r4, #16]
 8000876:	6022      	str	r2, [r4, #0]
 8000878:	d504      	bpl.n	8000884 <__sflush_r+0x7c>
 800087a:	1c42      	adds	r2, r0, #1
 800087c:	d101      	bne.n	8000882 <__sflush_r+0x7a>
 800087e:	682b      	ldr	r3, [r5, #0]
 8000880:	b903      	cbnz	r3, 8000884 <__sflush_r+0x7c>
 8000882:	6560      	str	r0, [r4, #84]	; 0x54
 8000884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000886:	602f      	str	r7, [r5, #0]
 8000888:	2900      	cmp	r1, #0
 800088a:	d0ca      	beq.n	8000822 <__sflush_r+0x1a>
 800088c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000890:	4299      	cmp	r1, r3
 8000892:	d002      	beq.n	800089a <__sflush_r+0x92>
 8000894:	4628      	mov	r0, r5
 8000896:	f000 f9d7 	bl	8000c48 <_free_r>
 800089a:	2000      	movs	r0, #0
 800089c:	6360      	str	r0, [r4, #52]	; 0x34
 800089e:	e7c1      	b.n	8000824 <__sflush_r+0x1c>
 80008a0:	6a21      	ldr	r1, [r4, #32]
 80008a2:	2301      	movs	r3, #1
 80008a4:	4628      	mov	r0, r5
 80008a6:	47b0      	blx	r6
 80008a8:	1c41      	adds	r1, r0, #1
 80008aa:	d1c7      	bne.n	800083c <__sflush_r+0x34>
 80008ac:	682b      	ldr	r3, [r5, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0c4      	beq.n	800083c <__sflush_r+0x34>
 80008b2:	2b1d      	cmp	r3, #29
 80008b4:	d001      	beq.n	80008ba <__sflush_r+0xb2>
 80008b6:	2b16      	cmp	r3, #22
 80008b8:	d101      	bne.n	80008be <__sflush_r+0xb6>
 80008ba:	602f      	str	r7, [r5, #0]
 80008bc:	e7b1      	b.n	8000822 <__sflush_r+0x1a>
 80008be:	89a3      	ldrh	r3, [r4, #12]
 80008c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c4:	81a3      	strh	r3, [r4, #12]
 80008c6:	e7ad      	b.n	8000824 <__sflush_r+0x1c>
 80008c8:	690f      	ldr	r7, [r1, #16]
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d0a9      	beq.n	8000822 <__sflush_r+0x1a>
 80008ce:	0793      	lsls	r3, r2, #30
 80008d0:	680e      	ldr	r6, [r1, #0]
 80008d2:	bf08      	it	eq
 80008d4:	694b      	ldreq	r3, [r1, #20]
 80008d6:	600f      	str	r7, [r1, #0]
 80008d8:	bf18      	it	ne
 80008da:	2300      	movne	r3, #0
 80008dc:	eba6 0807 	sub.w	r8, r6, r7
 80008e0:	608b      	str	r3, [r1, #8]
 80008e2:	f1b8 0f00 	cmp.w	r8, #0
 80008e6:	dd9c      	ble.n	8000822 <__sflush_r+0x1a>
 80008e8:	6a21      	ldr	r1, [r4, #32]
 80008ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80008ec:	4643      	mov	r3, r8
 80008ee:	463a      	mov	r2, r7
 80008f0:	4628      	mov	r0, r5
 80008f2:	47b0      	blx	r6
 80008f4:	2800      	cmp	r0, #0
 80008f6:	dc06      	bgt.n	8000906 <__sflush_r+0xfe>
 80008f8:	89a3      	ldrh	r3, [r4, #12]
 80008fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008fe:	81a3      	strh	r3, [r4, #12]
 8000900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000904:	e78e      	b.n	8000824 <__sflush_r+0x1c>
 8000906:	4407      	add	r7, r0
 8000908:	eba8 0800 	sub.w	r8, r8, r0
 800090c:	e7e9      	b.n	80008e2 <__sflush_r+0xda>
 800090e:	bf00      	nop
 8000910:	20400001 	.word	0x20400001

08000914 <_fflush_r>:
 8000914:	b538      	push	{r3, r4, r5, lr}
 8000916:	690b      	ldr	r3, [r1, #16]
 8000918:	4605      	mov	r5, r0
 800091a:	460c      	mov	r4, r1
 800091c:	b913      	cbnz	r3, 8000924 <_fflush_r+0x10>
 800091e:	2500      	movs	r5, #0
 8000920:	4628      	mov	r0, r5
 8000922:	bd38      	pop	{r3, r4, r5, pc}
 8000924:	b118      	cbz	r0, 800092e <_fflush_r+0x1a>
 8000926:	6983      	ldr	r3, [r0, #24]
 8000928:	b90b      	cbnz	r3, 800092e <_fflush_r+0x1a>
 800092a:	f000 f887 	bl	8000a3c <__sinit>
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <_fflush_r+0x6c>)
 8000930:	429c      	cmp	r4, r3
 8000932:	d11b      	bne.n	800096c <_fflush_r+0x58>
 8000934:	686c      	ldr	r4, [r5, #4]
 8000936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0ef      	beq.n	800091e <_fflush_r+0xa>
 800093e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000940:	07d0      	lsls	r0, r2, #31
 8000942:	d404      	bmi.n	800094e <_fflush_r+0x3a>
 8000944:	0599      	lsls	r1, r3, #22
 8000946:	d402      	bmi.n	800094e <_fflush_r+0x3a>
 8000948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800094a:	f000 f915 	bl	8000b78 <__retarget_lock_acquire_recursive>
 800094e:	4628      	mov	r0, r5
 8000950:	4621      	mov	r1, r4
 8000952:	f7ff ff59 	bl	8000808 <__sflush_r>
 8000956:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000958:	07da      	lsls	r2, r3, #31
 800095a:	4605      	mov	r5, r0
 800095c:	d4e0      	bmi.n	8000920 <_fflush_r+0xc>
 800095e:	89a3      	ldrh	r3, [r4, #12]
 8000960:	059b      	lsls	r3, r3, #22
 8000962:	d4dd      	bmi.n	8000920 <_fflush_r+0xc>
 8000964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000966:	f000 f908 	bl	8000b7a <__retarget_lock_release_recursive>
 800096a:	e7d9      	b.n	8000920 <_fflush_r+0xc>
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <_fflush_r+0x70>)
 800096e:	429c      	cmp	r4, r3
 8000970:	d101      	bne.n	8000976 <_fflush_r+0x62>
 8000972:	68ac      	ldr	r4, [r5, #8]
 8000974:	e7df      	b.n	8000936 <_fflush_r+0x22>
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <_fflush_r+0x74>)
 8000978:	429c      	cmp	r4, r3
 800097a:	bf08      	it	eq
 800097c:	68ec      	ldreq	r4, [r5, #12]
 800097e:	e7da      	b.n	8000936 <_fflush_r+0x22>
 8000980:	08000ff8 	.word	0x08000ff8
 8000984:	08001018 	.word	0x08001018
 8000988:	08000fd8 	.word	0x08000fd8

0800098c <std>:
 800098c:	2300      	movs	r3, #0
 800098e:	b510      	push	{r4, lr}
 8000990:	4604      	mov	r4, r0
 8000992:	e9c0 3300 	strd	r3, r3, [r0]
 8000996:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800099a:	6083      	str	r3, [r0, #8]
 800099c:	8181      	strh	r1, [r0, #12]
 800099e:	6643      	str	r3, [r0, #100]	; 0x64
 80009a0:	81c2      	strh	r2, [r0, #14]
 80009a2:	6183      	str	r3, [r0, #24]
 80009a4:	4619      	mov	r1, r3
 80009a6:	2208      	movs	r2, #8
 80009a8:	305c      	adds	r0, #92	; 0x5c
 80009aa:	f7ff fdef 	bl	800058c <memset>
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <std+0x38>)
 80009b0:	6263      	str	r3, [r4, #36]	; 0x24
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <std+0x3c>)
 80009b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <std+0x40>)
 80009b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <std+0x44>)
 80009bc:	6224      	str	r4, [r4, #32]
 80009be:	6323      	str	r3, [r4, #48]	; 0x30
 80009c0:	bd10      	pop	{r4, pc}
 80009c2:	bf00      	nop
 80009c4:	08000e29 	.word	0x08000e29
 80009c8:	08000e4b 	.word	0x08000e4b
 80009cc:	08000e83 	.word	0x08000e83
 80009d0:	08000ea7 	.word	0x08000ea7

080009d4 <_cleanup_r>:
 80009d4:	4901      	ldr	r1, [pc, #4]	; (80009dc <_cleanup_r+0x8>)
 80009d6:	f000 b8af 	b.w	8000b38 <_fwalk_reent>
 80009da:	bf00      	nop
 80009dc:	08000915 	.word	0x08000915

080009e0 <__sfmoreglue>:
 80009e0:	b570      	push	{r4, r5, r6, lr}
 80009e2:	2268      	movs	r2, #104	; 0x68
 80009e4:	1e4d      	subs	r5, r1, #1
 80009e6:	4355      	muls	r5, r2
 80009e8:	460e      	mov	r6, r1
 80009ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80009ee:	f000 f997 	bl	8000d20 <_malloc_r>
 80009f2:	4604      	mov	r4, r0
 80009f4:	b140      	cbz	r0, 8000a08 <__sfmoreglue+0x28>
 80009f6:	2100      	movs	r1, #0
 80009f8:	e9c0 1600 	strd	r1, r6, [r0]
 80009fc:	300c      	adds	r0, #12
 80009fe:	60a0      	str	r0, [r4, #8]
 8000a00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000a04:	f7ff fdc2 	bl	800058c <memset>
 8000a08:	4620      	mov	r0, r4
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}

08000a0c <__sfp_lock_acquire>:
 8000a0c:	4801      	ldr	r0, [pc, #4]	; (8000a14 <__sfp_lock_acquire+0x8>)
 8000a0e:	f000 b8b3 	b.w	8000b78 <__retarget_lock_acquire_recursive>
 8000a12:	bf00      	nop
 8000a14:	20000085 	.word	0x20000085

08000a18 <__sfp_lock_release>:
 8000a18:	4801      	ldr	r0, [pc, #4]	; (8000a20 <__sfp_lock_release+0x8>)
 8000a1a:	f000 b8ae 	b.w	8000b7a <__retarget_lock_release_recursive>
 8000a1e:	bf00      	nop
 8000a20:	20000085 	.word	0x20000085

08000a24 <__sinit_lock_acquire>:
 8000a24:	4801      	ldr	r0, [pc, #4]	; (8000a2c <__sinit_lock_acquire+0x8>)
 8000a26:	f000 b8a7 	b.w	8000b78 <__retarget_lock_acquire_recursive>
 8000a2a:	bf00      	nop
 8000a2c:	20000086 	.word	0x20000086

08000a30 <__sinit_lock_release>:
 8000a30:	4801      	ldr	r0, [pc, #4]	; (8000a38 <__sinit_lock_release+0x8>)
 8000a32:	f000 b8a2 	b.w	8000b7a <__retarget_lock_release_recursive>
 8000a36:	bf00      	nop
 8000a38:	20000086 	.word	0x20000086

08000a3c <__sinit>:
 8000a3c:	b510      	push	{r4, lr}
 8000a3e:	4604      	mov	r4, r0
 8000a40:	f7ff fff0 	bl	8000a24 <__sinit_lock_acquire>
 8000a44:	69a3      	ldr	r3, [r4, #24]
 8000a46:	b11b      	cbz	r3, 8000a50 <__sinit+0x14>
 8000a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a4c:	f7ff bff0 	b.w	8000a30 <__sinit_lock_release>
 8000a50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000a54:	6523      	str	r3, [r4, #80]	; 0x50
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <__sinit+0x68>)
 8000a58:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <__sinit+0x6c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8000a5e:	42a3      	cmp	r3, r4
 8000a60:	bf04      	itt	eq
 8000a62:	2301      	moveq	r3, #1
 8000a64:	61a3      	streq	r3, [r4, #24]
 8000a66:	4620      	mov	r0, r4
 8000a68:	f000 f820 	bl	8000aac <__sfp>
 8000a6c:	6060      	str	r0, [r4, #4]
 8000a6e:	4620      	mov	r0, r4
 8000a70:	f000 f81c 	bl	8000aac <__sfp>
 8000a74:	60a0      	str	r0, [r4, #8]
 8000a76:	4620      	mov	r0, r4
 8000a78:	f000 f818 	bl	8000aac <__sfp>
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60e0      	str	r0, [r4, #12]
 8000a80:	2104      	movs	r1, #4
 8000a82:	6860      	ldr	r0, [r4, #4]
 8000a84:	f7ff ff82 	bl	800098c <std>
 8000a88:	68a0      	ldr	r0, [r4, #8]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2109      	movs	r1, #9
 8000a8e:	f7ff ff7d 	bl	800098c <std>
 8000a92:	68e0      	ldr	r0, [r4, #12]
 8000a94:	2202      	movs	r2, #2
 8000a96:	2112      	movs	r1, #18
 8000a98:	f7ff ff78 	bl	800098c <std>
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61a3      	str	r3, [r4, #24]
 8000aa0:	e7d2      	b.n	8000a48 <__sinit+0xc>
 8000aa2:	bf00      	nop
 8000aa4:	08000fd4 	.word	0x08000fd4
 8000aa8:	080009d5 	.word	0x080009d5

08000aac <__sfp>:
 8000aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aae:	4607      	mov	r7, r0
 8000ab0:	f7ff ffac 	bl	8000a0c <__sfp_lock_acquire>
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <__sfp+0x84>)
 8000ab6:	681e      	ldr	r6, [r3, #0]
 8000ab8:	69b3      	ldr	r3, [r6, #24]
 8000aba:	b913      	cbnz	r3, 8000ac2 <__sfp+0x16>
 8000abc:	4630      	mov	r0, r6
 8000abe:	f7ff ffbd 	bl	8000a3c <__sinit>
 8000ac2:	3648      	adds	r6, #72	; 0x48
 8000ac4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	d503      	bpl.n	8000ad4 <__sfp+0x28>
 8000acc:	6833      	ldr	r3, [r6, #0]
 8000ace:	b30b      	cbz	r3, 8000b14 <__sfp+0x68>
 8000ad0:	6836      	ldr	r6, [r6, #0]
 8000ad2:	e7f7      	b.n	8000ac4 <__sfp+0x18>
 8000ad4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ad8:	b9d5      	cbnz	r5, 8000b10 <__sfp+0x64>
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <__sfp+0x88>)
 8000adc:	60e3      	str	r3, [r4, #12]
 8000ade:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000ae2:	6665      	str	r5, [r4, #100]	; 0x64
 8000ae4:	f000 f847 	bl	8000b76 <__retarget_lock_init_recursive>
 8000ae8:	f7ff ff96 	bl	8000a18 <__sfp_lock_release>
 8000aec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000af0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000af4:	6025      	str	r5, [r4, #0]
 8000af6:	61a5      	str	r5, [r4, #24]
 8000af8:	2208      	movs	r2, #8
 8000afa:	4629      	mov	r1, r5
 8000afc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000b00:	f7ff fd44 	bl	800058c <memset>
 8000b04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000b08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000b0c:	4620      	mov	r0, r4
 8000b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b10:	3468      	adds	r4, #104	; 0x68
 8000b12:	e7d9      	b.n	8000ac8 <__sfp+0x1c>
 8000b14:	2104      	movs	r1, #4
 8000b16:	4638      	mov	r0, r7
 8000b18:	f7ff ff62 	bl	80009e0 <__sfmoreglue>
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	6030      	str	r0, [r6, #0]
 8000b20:	2800      	cmp	r0, #0
 8000b22:	d1d5      	bne.n	8000ad0 <__sfp+0x24>
 8000b24:	f7ff ff78 	bl	8000a18 <__sfp_lock_release>
 8000b28:	230c      	movs	r3, #12
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	e7ee      	b.n	8000b0c <__sfp+0x60>
 8000b2e:	bf00      	nop
 8000b30:	08000fd4 	.word	0x08000fd4
 8000b34:	ffff0001 	.word	0xffff0001

08000b38 <_fwalk_reent>:
 8000b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b3c:	4606      	mov	r6, r0
 8000b3e:	4688      	mov	r8, r1
 8000b40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b44:	2700      	movs	r7, #0
 8000b46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b4a:	f1b9 0901 	subs.w	r9, r9, #1
 8000b4e:	d505      	bpl.n	8000b5c <_fwalk_reent+0x24>
 8000b50:	6824      	ldr	r4, [r4, #0]
 8000b52:	2c00      	cmp	r4, #0
 8000b54:	d1f7      	bne.n	8000b46 <_fwalk_reent+0xe>
 8000b56:	4638      	mov	r0, r7
 8000b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b5c:	89ab      	ldrh	r3, [r5, #12]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d907      	bls.n	8000b72 <_fwalk_reent+0x3a>
 8000b62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b66:	3301      	adds	r3, #1
 8000b68:	d003      	beq.n	8000b72 <_fwalk_reent+0x3a>
 8000b6a:	4629      	mov	r1, r5
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	47c0      	blx	r8
 8000b70:	4307      	orrs	r7, r0
 8000b72:	3568      	adds	r5, #104	; 0x68
 8000b74:	e7e9      	b.n	8000b4a <_fwalk_reent+0x12>

08000b76 <__retarget_lock_init_recursive>:
 8000b76:	4770      	bx	lr

08000b78 <__retarget_lock_acquire_recursive>:
 8000b78:	4770      	bx	lr

08000b7a <__retarget_lock_release_recursive>:
 8000b7a:	4770      	bx	lr

08000b7c <__swhatbuf_r>:
 8000b7c:	b570      	push	{r4, r5, r6, lr}
 8000b7e:	460e      	mov	r6, r1
 8000b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b84:	2900      	cmp	r1, #0
 8000b86:	b096      	sub	sp, #88	; 0x58
 8000b88:	4614      	mov	r4, r2
 8000b8a:	461d      	mov	r5, r3
 8000b8c:	da08      	bge.n	8000ba0 <__swhatbuf_r+0x24>
 8000b8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000b92:	2200      	movs	r2, #0
 8000b94:	602a      	str	r2, [r5, #0]
 8000b96:	061a      	lsls	r2, r3, #24
 8000b98:	d410      	bmi.n	8000bbc <__swhatbuf_r+0x40>
 8000b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b9e:	e00e      	b.n	8000bbe <__swhatbuf_r+0x42>
 8000ba0:	466a      	mov	r2, sp
 8000ba2:	f000 f9a7 	bl	8000ef4 <_fstat_r>
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	dbf1      	blt.n	8000b8e <__swhatbuf_r+0x12>
 8000baa:	9a01      	ldr	r2, [sp, #4]
 8000bac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000bb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000bb4:	425a      	negs	r2, r3
 8000bb6:	415a      	adcs	r2, r3
 8000bb8:	602a      	str	r2, [r5, #0]
 8000bba:	e7ee      	b.n	8000b9a <__swhatbuf_r+0x1e>
 8000bbc:	2340      	movs	r3, #64	; 0x40
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	6023      	str	r3, [r4, #0]
 8000bc2:	b016      	add	sp, #88	; 0x58
 8000bc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08000bc8 <__smakebuf_r>:
 8000bc8:	898b      	ldrh	r3, [r1, #12]
 8000bca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000bcc:	079d      	lsls	r5, r3, #30
 8000bce:	4606      	mov	r6, r0
 8000bd0:	460c      	mov	r4, r1
 8000bd2:	d507      	bpl.n	8000be4 <__smakebuf_r+0x1c>
 8000bd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000bd8:	6023      	str	r3, [r4, #0]
 8000bda:	6123      	str	r3, [r4, #16]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	6163      	str	r3, [r4, #20]
 8000be0:	b002      	add	sp, #8
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
 8000be4:	ab01      	add	r3, sp, #4
 8000be6:	466a      	mov	r2, sp
 8000be8:	f7ff ffc8 	bl	8000b7c <__swhatbuf_r>
 8000bec:	9900      	ldr	r1, [sp, #0]
 8000bee:	4605      	mov	r5, r0
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	f000 f895 	bl	8000d20 <_malloc_r>
 8000bf6:	b948      	cbnz	r0, 8000c0c <__smakebuf_r+0x44>
 8000bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bfc:	059a      	lsls	r2, r3, #22
 8000bfe:	d4ef      	bmi.n	8000be0 <__smakebuf_r+0x18>
 8000c00:	f023 0303 	bic.w	r3, r3, #3
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	81a3      	strh	r3, [r4, #12]
 8000c0a:	e7e3      	b.n	8000bd4 <__smakebuf_r+0xc>
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <__smakebuf_r+0x7c>)
 8000c0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8000c10:	89a3      	ldrh	r3, [r4, #12]
 8000c12:	6020      	str	r0, [r4, #0]
 8000c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c18:	81a3      	strh	r3, [r4, #12]
 8000c1a:	9b00      	ldr	r3, [sp, #0]
 8000c1c:	6163      	str	r3, [r4, #20]
 8000c1e:	9b01      	ldr	r3, [sp, #4]
 8000c20:	6120      	str	r0, [r4, #16]
 8000c22:	b15b      	cbz	r3, 8000c3c <__smakebuf_r+0x74>
 8000c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c28:	4630      	mov	r0, r6
 8000c2a:	f000 f975 	bl	8000f18 <_isatty_r>
 8000c2e:	b128      	cbz	r0, 8000c3c <__smakebuf_r+0x74>
 8000c30:	89a3      	ldrh	r3, [r4, #12]
 8000c32:	f023 0303 	bic.w	r3, r3, #3
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	81a3      	strh	r3, [r4, #12]
 8000c3c:	89a0      	ldrh	r0, [r4, #12]
 8000c3e:	4305      	orrs	r5, r0
 8000c40:	81a5      	strh	r5, [r4, #12]
 8000c42:	e7cd      	b.n	8000be0 <__smakebuf_r+0x18>
 8000c44:	080009d5 	.word	0x080009d5

08000c48 <_free_r>:
 8000c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c4a:	2900      	cmp	r1, #0
 8000c4c:	d044      	beq.n	8000cd8 <_free_r+0x90>
 8000c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c52:	9001      	str	r0, [sp, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f1a1 0404 	sub.w	r4, r1, #4
 8000c5a:	bfb8      	it	lt
 8000c5c:	18e4      	addlt	r4, r4, r3
 8000c5e:	f000 f97d 	bl	8000f5c <__malloc_lock>
 8000c62:	4a1e      	ldr	r2, [pc, #120]	; (8000cdc <_free_r+0x94>)
 8000c64:	9801      	ldr	r0, [sp, #4]
 8000c66:	6813      	ldr	r3, [r2, #0]
 8000c68:	b933      	cbnz	r3, 8000c78 <_free_r+0x30>
 8000c6a:	6063      	str	r3, [r4, #4]
 8000c6c:	6014      	str	r4, [r2, #0]
 8000c6e:	b003      	add	sp, #12
 8000c70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000c74:	f000 b978 	b.w	8000f68 <__malloc_unlock>
 8000c78:	42a3      	cmp	r3, r4
 8000c7a:	d908      	bls.n	8000c8e <_free_r+0x46>
 8000c7c:	6825      	ldr	r5, [r4, #0]
 8000c7e:	1961      	adds	r1, r4, r5
 8000c80:	428b      	cmp	r3, r1
 8000c82:	bf01      	itttt	eq
 8000c84:	6819      	ldreq	r1, [r3, #0]
 8000c86:	685b      	ldreq	r3, [r3, #4]
 8000c88:	1949      	addeq	r1, r1, r5
 8000c8a:	6021      	streq	r1, [r4, #0]
 8000c8c:	e7ed      	b.n	8000c6a <_free_r+0x22>
 8000c8e:	461a      	mov	r2, r3
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	b10b      	cbz	r3, 8000c98 <_free_r+0x50>
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d9fa      	bls.n	8000c8e <_free_r+0x46>
 8000c98:	6811      	ldr	r1, [r2, #0]
 8000c9a:	1855      	adds	r5, r2, r1
 8000c9c:	42a5      	cmp	r5, r4
 8000c9e:	d10b      	bne.n	8000cb8 <_free_r+0x70>
 8000ca0:	6824      	ldr	r4, [r4, #0]
 8000ca2:	4421      	add	r1, r4
 8000ca4:	1854      	adds	r4, r2, r1
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	6011      	str	r1, [r2, #0]
 8000caa:	d1e0      	bne.n	8000c6e <_free_r+0x26>
 8000cac:	681c      	ldr	r4, [r3, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	6053      	str	r3, [r2, #4]
 8000cb2:	4421      	add	r1, r4
 8000cb4:	6011      	str	r1, [r2, #0]
 8000cb6:	e7da      	b.n	8000c6e <_free_r+0x26>
 8000cb8:	d902      	bls.n	8000cc0 <_free_r+0x78>
 8000cba:	230c      	movs	r3, #12
 8000cbc:	6003      	str	r3, [r0, #0]
 8000cbe:	e7d6      	b.n	8000c6e <_free_r+0x26>
 8000cc0:	6825      	ldr	r5, [r4, #0]
 8000cc2:	1961      	adds	r1, r4, r5
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	bf04      	itt	eq
 8000cc8:	6819      	ldreq	r1, [r3, #0]
 8000cca:	685b      	ldreq	r3, [r3, #4]
 8000ccc:	6063      	str	r3, [r4, #4]
 8000cce:	bf04      	itt	eq
 8000cd0:	1949      	addeq	r1, r1, r5
 8000cd2:	6021      	streq	r1, [r4, #0]
 8000cd4:	6054      	str	r4, [r2, #4]
 8000cd6:	e7ca      	b.n	8000c6e <_free_r+0x26>
 8000cd8:	b003      	add	sp, #12
 8000cda:	bd30      	pop	{r4, r5, pc}
 8000cdc:	20000088 	.word	0x20000088

08000ce0 <sbrk_aligned>:
 8000ce0:	b570      	push	{r4, r5, r6, lr}
 8000ce2:	4e0e      	ldr	r6, [pc, #56]	; (8000d1c <sbrk_aligned+0x3c>)
 8000ce4:	460c      	mov	r4, r1
 8000ce6:	6831      	ldr	r1, [r6, #0]
 8000ce8:	4605      	mov	r5, r0
 8000cea:	b911      	cbnz	r1, 8000cf2 <sbrk_aligned+0x12>
 8000cec:	f000 f88c 	bl	8000e08 <_sbrk_r>
 8000cf0:	6030      	str	r0, [r6, #0]
 8000cf2:	4621      	mov	r1, r4
 8000cf4:	4628      	mov	r0, r5
 8000cf6:	f000 f887 	bl	8000e08 <_sbrk_r>
 8000cfa:	1c43      	adds	r3, r0, #1
 8000cfc:	d00a      	beq.n	8000d14 <sbrk_aligned+0x34>
 8000cfe:	1cc4      	adds	r4, r0, #3
 8000d00:	f024 0403 	bic.w	r4, r4, #3
 8000d04:	42a0      	cmp	r0, r4
 8000d06:	d007      	beq.n	8000d18 <sbrk_aligned+0x38>
 8000d08:	1a21      	subs	r1, r4, r0
 8000d0a:	4628      	mov	r0, r5
 8000d0c:	f000 f87c 	bl	8000e08 <_sbrk_r>
 8000d10:	3001      	adds	r0, #1
 8000d12:	d101      	bne.n	8000d18 <sbrk_aligned+0x38>
 8000d14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000d18:	4620      	mov	r0, r4
 8000d1a:	bd70      	pop	{r4, r5, r6, pc}
 8000d1c:	2000008c 	.word	0x2000008c

08000d20 <_malloc_r>:
 8000d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d24:	1ccd      	adds	r5, r1, #3
 8000d26:	f025 0503 	bic.w	r5, r5, #3
 8000d2a:	3508      	adds	r5, #8
 8000d2c:	2d0c      	cmp	r5, #12
 8000d2e:	bf38      	it	cc
 8000d30:	250c      	movcc	r5, #12
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	4607      	mov	r7, r0
 8000d36:	db01      	blt.n	8000d3c <_malloc_r+0x1c>
 8000d38:	42a9      	cmp	r1, r5
 8000d3a:	d905      	bls.n	8000d48 <_malloc_r+0x28>
 8000d3c:	230c      	movs	r3, #12
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	2600      	movs	r6, #0
 8000d42:	4630      	mov	r0, r6
 8000d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d48:	4e2e      	ldr	r6, [pc, #184]	; (8000e04 <_malloc_r+0xe4>)
 8000d4a:	f000 f907 	bl	8000f5c <__malloc_lock>
 8000d4e:	6833      	ldr	r3, [r6, #0]
 8000d50:	461c      	mov	r4, r3
 8000d52:	bb34      	cbnz	r4, 8000da2 <_malloc_r+0x82>
 8000d54:	4629      	mov	r1, r5
 8000d56:	4638      	mov	r0, r7
 8000d58:	f7ff ffc2 	bl	8000ce0 <sbrk_aligned>
 8000d5c:	1c43      	adds	r3, r0, #1
 8000d5e:	4604      	mov	r4, r0
 8000d60:	d14d      	bne.n	8000dfe <_malloc_r+0xde>
 8000d62:	6834      	ldr	r4, [r6, #0]
 8000d64:	4626      	mov	r6, r4
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d140      	bne.n	8000dec <_malloc_r+0xcc>
 8000d6a:	6823      	ldr	r3, [r4, #0]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	4638      	mov	r0, r7
 8000d70:	eb04 0803 	add.w	r8, r4, r3
 8000d74:	f000 f848 	bl	8000e08 <_sbrk_r>
 8000d78:	4580      	cmp	r8, r0
 8000d7a:	d13a      	bne.n	8000df2 <_malloc_r+0xd2>
 8000d7c:	6821      	ldr	r1, [r4, #0]
 8000d7e:	3503      	adds	r5, #3
 8000d80:	1a6d      	subs	r5, r5, r1
 8000d82:	f025 0503 	bic.w	r5, r5, #3
 8000d86:	3508      	adds	r5, #8
 8000d88:	2d0c      	cmp	r5, #12
 8000d8a:	bf38      	it	cc
 8000d8c:	250c      	movcc	r5, #12
 8000d8e:	4629      	mov	r1, r5
 8000d90:	4638      	mov	r0, r7
 8000d92:	f7ff ffa5 	bl	8000ce0 <sbrk_aligned>
 8000d96:	3001      	adds	r0, #1
 8000d98:	d02b      	beq.n	8000df2 <_malloc_r+0xd2>
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	442b      	add	r3, r5
 8000d9e:	6023      	str	r3, [r4, #0]
 8000da0:	e00e      	b.n	8000dc0 <_malloc_r+0xa0>
 8000da2:	6822      	ldr	r2, [r4, #0]
 8000da4:	1b52      	subs	r2, r2, r5
 8000da6:	d41e      	bmi.n	8000de6 <_malloc_r+0xc6>
 8000da8:	2a0b      	cmp	r2, #11
 8000daa:	d916      	bls.n	8000dda <_malloc_r+0xba>
 8000dac:	1961      	adds	r1, r4, r5
 8000dae:	42a3      	cmp	r3, r4
 8000db0:	6025      	str	r5, [r4, #0]
 8000db2:	bf18      	it	ne
 8000db4:	6059      	strne	r1, [r3, #4]
 8000db6:	6863      	ldr	r3, [r4, #4]
 8000db8:	bf08      	it	eq
 8000dba:	6031      	streq	r1, [r6, #0]
 8000dbc:	5162      	str	r2, [r4, r5]
 8000dbe:	604b      	str	r3, [r1, #4]
 8000dc0:	4638      	mov	r0, r7
 8000dc2:	f104 060b 	add.w	r6, r4, #11
 8000dc6:	f000 f8cf 	bl	8000f68 <__malloc_unlock>
 8000dca:	f026 0607 	bic.w	r6, r6, #7
 8000dce:	1d23      	adds	r3, r4, #4
 8000dd0:	1af2      	subs	r2, r6, r3
 8000dd2:	d0b6      	beq.n	8000d42 <_malloc_r+0x22>
 8000dd4:	1b9b      	subs	r3, r3, r6
 8000dd6:	50a3      	str	r3, [r4, r2]
 8000dd8:	e7b3      	b.n	8000d42 <_malloc_r+0x22>
 8000dda:	6862      	ldr	r2, [r4, #4]
 8000ddc:	42a3      	cmp	r3, r4
 8000dde:	bf0c      	ite	eq
 8000de0:	6032      	streq	r2, [r6, #0]
 8000de2:	605a      	strne	r2, [r3, #4]
 8000de4:	e7ec      	b.n	8000dc0 <_malloc_r+0xa0>
 8000de6:	4623      	mov	r3, r4
 8000de8:	6864      	ldr	r4, [r4, #4]
 8000dea:	e7b2      	b.n	8000d52 <_malloc_r+0x32>
 8000dec:	4634      	mov	r4, r6
 8000dee:	6876      	ldr	r6, [r6, #4]
 8000df0:	e7b9      	b.n	8000d66 <_malloc_r+0x46>
 8000df2:	230c      	movs	r3, #12
 8000df4:	603b      	str	r3, [r7, #0]
 8000df6:	4638      	mov	r0, r7
 8000df8:	f000 f8b6 	bl	8000f68 <__malloc_unlock>
 8000dfc:	e7a1      	b.n	8000d42 <_malloc_r+0x22>
 8000dfe:	6025      	str	r5, [r4, #0]
 8000e00:	e7de      	b.n	8000dc0 <_malloc_r+0xa0>
 8000e02:	bf00      	nop
 8000e04:	20000088 	.word	0x20000088

08000e08 <_sbrk_r>:
 8000e08:	b538      	push	{r3, r4, r5, lr}
 8000e0a:	4d06      	ldr	r5, [pc, #24]	; (8000e24 <_sbrk_r+0x1c>)
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	4604      	mov	r4, r0
 8000e10:	4608      	mov	r0, r1
 8000e12:	602b      	str	r3, [r5, #0]
 8000e14:	f7ff fb30 	bl	8000478 <_sbrk>
 8000e18:	1c43      	adds	r3, r0, #1
 8000e1a:	d102      	bne.n	8000e22 <_sbrk_r+0x1a>
 8000e1c:	682b      	ldr	r3, [r5, #0]
 8000e1e:	b103      	cbz	r3, 8000e22 <_sbrk_r+0x1a>
 8000e20:	6023      	str	r3, [r4, #0]
 8000e22:	bd38      	pop	{r3, r4, r5, pc}
 8000e24:	20000090 	.word	0x20000090

08000e28 <__sread>:
 8000e28:	b510      	push	{r4, lr}
 8000e2a:	460c      	mov	r4, r1
 8000e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e30:	f000 f8a0 	bl	8000f74 <_read_r>
 8000e34:	2800      	cmp	r0, #0
 8000e36:	bfab      	itete	ge
 8000e38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000e3a:	89a3      	ldrhlt	r3, [r4, #12]
 8000e3c:	181b      	addge	r3, r3, r0
 8000e3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e42:	bfac      	ite	ge
 8000e44:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e46:	81a3      	strhlt	r3, [r4, #12]
 8000e48:	bd10      	pop	{r4, pc}

08000e4a <__swrite>:
 8000e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e4e:	461f      	mov	r7, r3
 8000e50:	898b      	ldrh	r3, [r1, #12]
 8000e52:	05db      	lsls	r3, r3, #23
 8000e54:	4605      	mov	r5, r0
 8000e56:	460c      	mov	r4, r1
 8000e58:	4616      	mov	r6, r2
 8000e5a:	d505      	bpl.n	8000e68 <__swrite+0x1e>
 8000e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e60:	2302      	movs	r3, #2
 8000e62:	2200      	movs	r2, #0
 8000e64:	f000 f868 	bl	8000f38 <_lseek_r>
 8000e68:	89a3      	ldrh	r3, [r4, #12]
 8000e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e72:	81a3      	strh	r3, [r4, #12]
 8000e74:	4632      	mov	r2, r6
 8000e76:	463b      	mov	r3, r7
 8000e78:	4628      	mov	r0, r5
 8000e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e7e:	f000 b817 	b.w	8000eb0 <_write_r>

08000e82 <__sseek>:
 8000e82:	b510      	push	{r4, lr}
 8000e84:	460c      	mov	r4, r1
 8000e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e8a:	f000 f855 	bl	8000f38 <_lseek_r>
 8000e8e:	1c43      	adds	r3, r0, #1
 8000e90:	89a3      	ldrh	r3, [r4, #12]
 8000e92:	bf15      	itete	ne
 8000e94:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e9e:	81a3      	strheq	r3, [r4, #12]
 8000ea0:	bf18      	it	ne
 8000ea2:	81a3      	strhne	r3, [r4, #12]
 8000ea4:	bd10      	pop	{r4, pc}

08000ea6 <__sclose>:
 8000ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000eaa:	f000 b813 	b.w	8000ed4 <_close_r>
	...

08000eb0 <_write_r>:
 8000eb0:	b538      	push	{r3, r4, r5, lr}
 8000eb2:	4d07      	ldr	r5, [pc, #28]	; (8000ed0 <_write_r+0x20>)
 8000eb4:	4604      	mov	r4, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4611      	mov	r1, r2
 8000eba:	2200      	movs	r2, #0
 8000ebc:	602a      	str	r2, [r5, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	f7ff fa89 	bl	80003d6 <_write>
 8000ec4:	1c43      	adds	r3, r0, #1
 8000ec6:	d102      	bne.n	8000ece <_write_r+0x1e>
 8000ec8:	682b      	ldr	r3, [r5, #0]
 8000eca:	b103      	cbz	r3, 8000ece <_write_r+0x1e>
 8000ecc:	6023      	str	r3, [r4, #0]
 8000ece:	bd38      	pop	{r3, r4, r5, pc}
 8000ed0:	20000090 	.word	0x20000090

08000ed4 <_close_r>:
 8000ed4:	b538      	push	{r3, r4, r5, lr}
 8000ed6:	4d06      	ldr	r5, [pc, #24]	; (8000ef0 <_close_r+0x1c>)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4604      	mov	r4, r0
 8000edc:	4608      	mov	r0, r1
 8000ede:	602b      	str	r3, [r5, #0]
 8000ee0:	f7ff fa95 	bl	800040e <_close>
 8000ee4:	1c43      	adds	r3, r0, #1
 8000ee6:	d102      	bne.n	8000eee <_close_r+0x1a>
 8000ee8:	682b      	ldr	r3, [r5, #0]
 8000eea:	b103      	cbz	r3, 8000eee <_close_r+0x1a>
 8000eec:	6023      	str	r3, [r4, #0]
 8000eee:	bd38      	pop	{r3, r4, r5, pc}
 8000ef0:	20000090 	.word	0x20000090

08000ef4 <_fstat_r>:
 8000ef4:	b538      	push	{r3, r4, r5, lr}
 8000ef6:	4d07      	ldr	r5, [pc, #28]	; (8000f14 <_fstat_r+0x20>)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	4604      	mov	r4, r0
 8000efc:	4608      	mov	r0, r1
 8000efe:	4611      	mov	r1, r2
 8000f00:	602b      	str	r3, [r5, #0]
 8000f02:	f7ff fa90 	bl	8000426 <_fstat>
 8000f06:	1c43      	adds	r3, r0, #1
 8000f08:	d102      	bne.n	8000f10 <_fstat_r+0x1c>
 8000f0a:	682b      	ldr	r3, [r5, #0]
 8000f0c:	b103      	cbz	r3, 8000f10 <_fstat_r+0x1c>
 8000f0e:	6023      	str	r3, [r4, #0]
 8000f10:	bd38      	pop	{r3, r4, r5, pc}
 8000f12:	bf00      	nop
 8000f14:	20000090 	.word	0x20000090

08000f18 <_isatty_r>:
 8000f18:	b538      	push	{r3, r4, r5, lr}
 8000f1a:	4d06      	ldr	r5, [pc, #24]	; (8000f34 <_isatty_r+0x1c>)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4604      	mov	r4, r0
 8000f20:	4608      	mov	r0, r1
 8000f22:	602b      	str	r3, [r5, #0]
 8000f24:	f7ff fa8f 	bl	8000446 <_isatty>
 8000f28:	1c43      	adds	r3, r0, #1
 8000f2a:	d102      	bne.n	8000f32 <_isatty_r+0x1a>
 8000f2c:	682b      	ldr	r3, [r5, #0]
 8000f2e:	b103      	cbz	r3, 8000f32 <_isatty_r+0x1a>
 8000f30:	6023      	str	r3, [r4, #0]
 8000f32:	bd38      	pop	{r3, r4, r5, pc}
 8000f34:	20000090 	.word	0x20000090

08000f38 <_lseek_r>:
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	4d07      	ldr	r5, [pc, #28]	; (8000f58 <_lseek_r+0x20>)
 8000f3c:	4604      	mov	r4, r0
 8000f3e:	4608      	mov	r0, r1
 8000f40:	4611      	mov	r1, r2
 8000f42:	2200      	movs	r2, #0
 8000f44:	602a      	str	r2, [r5, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	f7ff fa88 	bl	800045c <_lseek>
 8000f4c:	1c43      	adds	r3, r0, #1
 8000f4e:	d102      	bne.n	8000f56 <_lseek_r+0x1e>
 8000f50:	682b      	ldr	r3, [r5, #0]
 8000f52:	b103      	cbz	r3, 8000f56 <_lseek_r+0x1e>
 8000f54:	6023      	str	r3, [r4, #0]
 8000f56:	bd38      	pop	{r3, r4, r5, pc}
 8000f58:	20000090 	.word	0x20000090

08000f5c <__malloc_lock>:
 8000f5c:	4801      	ldr	r0, [pc, #4]	; (8000f64 <__malloc_lock+0x8>)
 8000f5e:	f7ff be0b 	b.w	8000b78 <__retarget_lock_acquire_recursive>
 8000f62:	bf00      	nop
 8000f64:	20000084 	.word	0x20000084

08000f68 <__malloc_unlock>:
 8000f68:	4801      	ldr	r0, [pc, #4]	; (8000f70 <__malloc_unlock+0x8>)
 8000f6a:	f7ff be06 	b.w	8000b7a <__retarget_lock_release_recursive>
 8000f6e:	bf00      	nop
 8000f70:	20000084 	.word	0x20000084

08000f74 <_read_r>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	4d07      	ldr	r5, [pc, #28]	; (8000f94 <_read_r+0x20>)
 8000f78:	4604      	mov	r4, r0
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	2200      	movs	r2, #0
 8000f80:	602a      	str	r2, [r5, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	f7ff fa0a 	bl	800039c <_read>
 8000f88:	1c43      	adds	r3, r0, #1
 8000f8a:	d102      	bne.n	8000f92 <_read_r+0x1e>
 8000f8c:	682b      	ldr	r3, [r5, #0]
 8000f8e:	b103      	cbz	r3, 8000f92 <_read_r+0x1e>
 8000f90:	6023      	str	r3, [r4, #0]
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
 8000f94:	20000090 	.word	0x20000090

08000f98 <_init>:
 8000f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9a:	bf00      	nop
 8000f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f9e:	bc08      	pop	{r3}
 8000fa0:	469e      	mov	lr, r3
 8000fa2:	4770      	bx	lr

08000fa4 <_fini>:
 8000fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa6:	bf00      	nop
 8000fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000faa:	bc08      	pop	{r3}
 8000fac:	469e      	mov	lr, r3
 8000fae:	4770      	bx	lr
