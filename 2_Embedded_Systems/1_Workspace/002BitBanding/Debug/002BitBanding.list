
002BitBanding.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000011c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002b4  080002bc  000102bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002b4  080002b4  000102bc  2**0
                  CONTENTS
  4 .ARM          00000000  080002b4  080002b4  000102bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002b4  080002bc  000102bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002b4  080002b4  000102b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002b8  080002b8  000102b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002bc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002bc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000a8  00000000  00000000  000102ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000005b  00000000  00000000  00010394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  000103f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000030  00000000  00000000  00010438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f34  00000000  00000000  00010468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000003ec  00000000  00000000  0001139c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003b11  00000000  00000000  00011788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00015299  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000054  00000000  00000000  000152ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800029c 	.word	0x0800029c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800029c 	.word	0x0800029c

080001d8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	/* Modify a content of the memory location 0x2000_0200 using usual method */
	//Set 0x2000_0200 with 0xFF
	__asm volatile("LDR R0,=#0x20000200");
 80001dc:	4806      	ldr	r0, [pc, #24]	; (80001f8 <main+0x20>)
	__asm volatile("LDRB R1,=#0xFF");
 80001de:	f04f 01ff 	mov.w	r1, #255	; 0xff
	__asm volatile("STRB R1,[R0]");
 80001e2:	7001      	strb	r1, [r0, #0]

	//Usual method
	__asm volatile("LDRB R2,[R0]");
 80001e4:	7802      	ldrb	r2, [r0, #0]
	__asm volatile("AND R2,#0x7F");
 80001e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	__asm volatile("STRB R2,[R0]");
 80001ea:	7002      	strb	r2, [r0, #0]

	//Set 0x2000_0200 with 0xFF
	__asm volatile("STRB R1,[R0]");
 80001ec:	7001      	strb	r1, [r0, #0]

	//Bit banding
	__asm volatile("LDR R3,=#0x2200401C");
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <main+0x24>)
	__asm volatile("LDRB R4,=#0x00");
 80001f0:	f04f 0400 	mov.w	r4, #0
	__asm volatile("STRB R4,[R3]");
 80001f4:	701c      	strb	r4, [r3, #0]


    /* Loop forever */
	for(;;);
 80001f6:	e7fe      	b.n	80001f6 <main+0x1e>
 80001f8:	20000200 	.word	0x20000200
 80001fc:	2200401c 	.word	0x2200401c

08000200 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000202:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000204:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000208:	480c      	ldr	r0, [pc, #48]	; (800023c <LoopForever+0x6>)
  ldr r1, =_edata
 800020a:	490d      	ldr	r1, [pc, #52]	; (8000240 <LoopForever+0xa>)
  ldr r2, =_sidata
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <LoopForever+0xe>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000210:	e002      	b.n	8000218 <LoopCopyDataInit>

08000212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000216:	3304      	adds	r3, #4

08000218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800021a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800021c:	d3f9      	bcc.n	8000212 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800021e:	4a0a      	ldr	r2, [pc, #40]	; (8000248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000220:	4c0a      	ldr	r4, [pc, #40]	; (800024c <LoopForever+0x16>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000224:	e001      	b.n	800022a <LoopFillZerobss>

08000226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000228:	3204      	adds	r2, #4

0800022a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800022a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800022c:	d3fb      	bcc.n	8000226 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800022e:	f000 f811 	bl	8000254 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000232:	f7ff ffd1 	bl	80001d8 <main>

08000236 <LoopForever>:

LoopForever:
  b LoopForever
 8000236:	e7fe      	b.n	8000236 <LoopForever>
  ldr   r0, =_estack
 8000238:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800023c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000240:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000244:	080002bc 	.word	0x080002bc
  ldr r2, =_sbss
 8000248:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800024c:	2000001c 	.word	0x2000001c

08000250 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000250:	e7fe      	b.n	8000250 <ADC_IRQHandler>
	...

08000254 <__libc_init_array>:
 8000254:	b570      	push	{r4, r5, r6, lr}
 8000256:	4d0d      	ldr	r5, [pc, #52]	; (800028c <__libc_init_array+0x38>)
 8000258:	4c0d      	ldr	r4, [pc, #52]	; (8000290 <__libc_init_array+0x3c>)
 800025a:	1b64      	subs	r4, r4, r5
 800025c:	10a4      	asrs	r4, r4, #2
 800025e:	2600      	movs	r6, #0
 8000260:	42a6      	cmp	r6, r4
 8000262:	d109      	bne.n	8000278 <__libc_init_array+0x24>
 8000264:	4d0b      	ldr	r5, [pc, #44]	; (8000294 <__libc_init_array+0x40>)
 8000266:	4c0c      	ldr	r4, [pc, #48]	; (8000298 <__libc_init_array+0x44>)
 8000268:	f000 f818 	bl	800029c <_init>
 800026c:	1b64      	subs	r4, r4, r5
 800026e:	10a4      	asrs	r4, r4, #2
 8000270:	2600      	movs	r6, #0
 8000272:	42a6      	cmp	r6, r4
 8000274:	d105      	bne.n	8000282 <__libc_init_array+0x2e>
 8000276:	bd70      	pop	{r4, r5, r6, pc}
 8000278:	f855 3b04 	ldr.w	r3, [r5], #4
 800027c:	4798      	blx	r3
 800027e:	3601      	adds	r6, #1
 8000280:	e7ee      	b.n	8000260 <__libc_init_array+0xc>
 8000282:	f855 3b04 	ldr.w	r3, [r5], #4
 8000286:	4798      	blx	r3
 8000288:	3601      	adds	r6, #1
 800028a:	e7f2      	b.n	8000272 <__libc_init_array+0x1e>
 800028c:	080002b4 	.word	0x080002b4
 8000290:	080002b4 	.word	0x080002b4
 8000294:	080002b4 	.word	0x080002b4
 8000298:	080002b8 	.word	0x080002b8

0800029c <_init>:
 800029c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800029e:	bf00      	nop
 80002a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002a2:	bc08      	pop	{r3}
 80002a4:	469e      	mov	lr, r3
 80002a6:	4770      	bx	lr

080002a8 <_fini>:
 80002a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002aa:	bf00      	nop
 80002ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ae:	bc08      	pop	{r3}
 80002b0:	469e      	mov	lr, r3
 80002b2:	4770      	bx	lr
